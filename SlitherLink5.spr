SPR# 状 P Open Close ver     Type  概要
-------------------------------------------------------------------------------
0001 ◎ C 02/20 02/20 0.001│ToDo│プロジェクト作成
0002 ◎ C 02/20 02/20 0.001│ToDo│背景・タイトルバー設置
0003 ◎ C 02/20 02/20 0.001│ToDo│線分数表示用ラベル設置
0004 ◎ C 02/20 02/20 0.001│ToDo│盤面クラス Board5x5 追加
0005 ◎ C 02/20 02/20 0.001│ToDo│Board5x5：手がかり数字設定可能に
0006 ◎ C 02/20 02/20 0.001│ToDo│Board5x5 の手がかり数字を盤面表示
0007 ◎ C 02/20 02/20 0.001│ToDo│Board5x5：各格子点の上下左右 link 状態を保持する配列追加
0008 ◎ C 02/20 02/20 0.001│ToDo│Board5x5.links 状態を Grid で表示
0009 ◎ C 02/20 02/20 0.001│ToDo│Board5x5：links 状態から clue_num[] 計算
0010 ◎ C 02/20 02/20 0.001│ToDo│Board5x5：リンク上下左右移動関数
0011 ◎ C 02/20 02/20 0.001│ToDo│Board5x5：ランダムにリンク上下左右移動関数
0012 ◎ C 02/20 02/20 0.001│ToDo│手がかり数字：空欄シンボルは ANY に変更
0013 ● C 02/20            │ToDo│リンクを順に決めていく探索関数をとりあえず実装
0014 ◎ C 02/21 02/21 0.001│ToDo│Board5x5：リンク情報を linkRt[], linkDn[] で管理
0015 ◎ C 02/21 02/21 0.001│ToDo│Grid：linkRt[], linkDn[] を参照して連結線描画
0016 ◎ C 02/21 02/21 0.001│ToDo│links_to_nums()：linkRt[], linkDn[] を参照
0017 ◎ C 02/21 02/21 0.001│ToDo│連結線移動処理：linkRt[], linkDn[] を参照
0018 ◎ C 02/21 02/21 0.001│ToDo│非連結確定を示す non_linkRt[], non_linkDn[] 導入
0019 ◎ C 02/21 02/21 0.001│ToDo│Grid：non_linkRt[], non_linkDn[] の場合は X 表示
0020 ◎ C 02/21 02/21 0.001│ToDo│set_clue_num(lst)： 0 周辺は非連結フラグを立てる
0021 ◎ C 02/21 02/21 0.001│ToDo│非分岐方向は非連結フラグを立てる
0022 ◎ C 02/21 02/21 0.001│ToDo│４方向が確定し、線分数が正しい場合は数字をグレイ、正しくない場合は赤に変える
0023 ◎ C 02/21 02/21 0.001│問題│混乱するので、すべての配列は壁ありにした方がよい
0024 ◎ C 02/21 02/21 0.001│ToDo│３の周りに X がある場合は、３辺確定とする
0025 ● C 02/21            │ToDo│２の周りの２辺に線を引いた場合は、残りを非連結に
0026 ● C 02/21            │ToDo│格子点から２辺に線を引いた場合は、残りを非連結に
0027 ● C 02/21            │ToDo│Board5x5.is_solved() 実装
0028 ◎ C 02/21 02/23 0.001│ToDo│詰まった場合のバックトラッキングを可能に
0029 ● C 02/21            │ToDo│コルーチン検索を行うメンバ関数実装
0030 ◎ C 02/23 02/23 0.001│ToDo│連結線数が不一致の場合はバックトラッキング開始
0031 ◎ C 02/23 02/23 0.001│問題│BT探索：右端から右連結される場合がある
0032 ◎ C 02/23 02/23 0.001│ToDo│4辺確定でなくても、線分が数字より大きい場合は数字を赤色表示
0033 ◎ C 02/23 02/23 0.001│問題│０の周りに連結線を配置してしまう場合がある
0034 ◎ C 02/23 02/23 0.001│問題│右端セル右に連結線を配置できないのに non_linkDn[ix] が１に設定されていない
0035 ◎ C 02/23 02/23 0.001│問題│下端セル下に連結線を配置してしまう場合がある
0036 ◎ C 02/23 02/23 0.001│ToDo│探索ノード数を画面表示
0037 ◎ C 02/23 02/23 0.001│問題│０の周りがすべて非連結なのに、数字がグレイ表示されない
0038 ◎ C 02/23 02/23 0.001│ToDo│mate[] 追加
0039 ● C 02/23            │ToDo│左右・上下連結を関数化し、mate[] 更新
0040 ◎ C 02/23 02/23 0.001│ToDo│is_looped(x, y) 実装
0041 ● C 02/23            │ToDo│10(?)ステップ連続探索
0042 ◎ C 02/24 02/24 0.001│問題│下連結した時、左のセル数字が条件を満たさなくても数字が赤表示されない場合がある
0043 ◎ C 02/24 02/24 0.001│ToDo│制約条件を満たしているかどうかのチェックを Board5x5 に移動
0044 ● C 02/24            │ToDo│Board5x5.count[] 配列を導入し、エッジ更新時に更新
0045 ● C 02/24            │ToDo│解をみつけた場合の探索終了処理
0046 ◎ C 02/24 02/24 0.001│問題│制約違反判定不正
0047 ● C 02/24            │ToDo│
0048 ● C 02/24            │ToDo│
0049 ● C 02/24            │ToDo│
0050 ● C 02/24            │ToDo│
